{"version":3,"sources":["app/initialize.js","app/tokenizer.js"],"names":[],"mappingsnHA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDA;AAAA","file":"public/app.js","sourcesContent":["'use strict';\n\nvar _ = require('lodash/fp');\nvar tokenize = require('./tokenizer');\nwindow._ = _;\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n\tvar $resultPanel = document.querySelector('.result');\n\t$resultPanel.style.display = 'none';\n\n\tvar $compute = document.querySelector('#compute');\n\t$compute.onclick = onCommand;\n\n\tdocument.querySelector('#expression').focus();\n\tdocument.querySelector('#expression').onkeydown = function (e) {\n\t\tif (e.key === 'Enter') {\n\t\t\tonCommand();\n\t\t}\n\t};\n\n\tfunction onCommand() {\n\t\t$resultPanel.style.display = '';\n\n\t\tvar result = compute(document.querySelector('#expression').value.trim());\n\t\tdocument.querySelector('.result .content').innerHTML = '<pre><code>' + result + '</code></pre>';\n\t}\n});\n\nfunction compute(query) {\n\tif (query.trim().length === 0) return 'You may type something';\n\n\ttry {\n\t\treturn calculate(query).join(' ');\n\t} catch (e) {\n\t\treturn JSON.stringify({\n\t\t\terror: e.message\n\t\t});\n\t}\n}\n\nfunction calculate(expression) {\n\tvar tokens = tokenize(expression).filter(function (token) {\n\t\treturn !token.match(/\\s+/);\n\t});\n\n\ttokens = scanForBinary(tokens, _.contains(_, ['%', 'mod']), function (a, op, b) {\n\t\treturn parseFloat(a) % parseFloat(b);\n\t});\n\n\ttokens = scanForBinary(tokens, _.contains(_, ['*', '/']), function (a, op, b) {\n\t\tif (op === '*') {\n\t\t\treturn parseFloat(a) * parseFloat(b);\n\t\t} else if (op === '/') {\n\t\t\treturn parseFloat(a) / parseFloat(b);\n\t\t}\n\t});\n\n\ttokens = scanForBinary(tokens, _.contains(_, ['+', '-']), function (a, op, b) {\n\t\tif (op === '+') {\n\t\t\treturn parseFloat(a) + parseFloat(b);\n\t\t} else if (op === '-') {\n\t\t\treturn parseFloat(a) - parseFloat(b);\n\t\t}\n\t});\n\n\ttokens = scanForBinary(tokens, _.contains(_, ['>', '<', '<=', '>=']), function (a, op, b) {\n\t\tswitch (op) {\n\t\t\tcase '>':\n\t\t\t\treturn parseFloat(a) > parseFloat(b);\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\treturn parseFloat(a) > parseFloat(b);\n\t\t\t\tbreak;\n\t\t\tcase '>=':\n\t\t\t\treturn parseFloat(a) >= parseFloat(b);\n\t\t\t\tbreak;\n\t\t\tcase '<=':\n\t\t\t\treturn parseFloat(a) >= parseFloat(b);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\ttokens = scanForBinary(tokens, _.contains(_, ['or', 'and']), function (a, op, b) {\n\t\tswitch (op) {\n\t\t\tcase 'and':\n\t\t\t\treturn a && b;\n\t\t\t\tbreak;\n\t\t\tcase 'or':\n\t\t\t\treturn a || b;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn tokens;\n}\n\nfunction scanForBinary(list, symbolPredicate, mergeFn) {\n\tvar reachedIndex = 0;\n\n\ttheWhile: while (true) {\n\t\tfor (var i = reachedIndex; i < list.length; i++) {\n\t\t\treachedIndex = i;\n\t\t\tif (symbolPredicate(list[i])) {\n\t\t\t\tlist.splice(i - 1, 3, mergeFn(list[i - 1], list[i], list[i + 1]));\n\t\t\t\tcontinue theWhile;\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n}\n\nfunction assert(expected, actual) {\n\tif (!_.isEqual(expected, actual)) throw 'Assertion failed, got ' + JSON.stringify(actual) + ' insted of ' + JSON.stringify(expected);else console.log('Assertion passed, got ' + JSON.stringify(actual));\n}\n","'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction isChar(character) {\n\treturn function (char) {\n\t\treturn char.length === 1 && char === character;\n\t};\n}\n\nfunction isLetter(char) {\n\treturn char.length === 1 && char.match(/[a-z]/i);\n}\n\nfunction isDigit(char) {\n\treturn char.length === 1 && char.match(/[0-9]/);\n}\n\nfunction tokenize(source) {\n\tvar list = [source[0]];\n\n\tvar cases = [[isDigit, isDigit], [isLetter, isLetter], [isLetter, isDigit], [isDigit, isChar('.')], [isChar('.'), isDigit], [isChar(' '), isChar(' ')], [isChar('>'), isChar('=')], [isChar('<'), isChar('=')]];\n\n\tfunction testChars(a, b) {\n\t\tvar result = false;\n\t\tcases.forEach(function (caseElem) {\n\t\t\tvar _caseElem = _slicedToArray(caseElem, 2),\n\t\t\t    lft = _caseElem[0],\n\t\t\t    rgt = _caseElem[1];\n\n\t\t\tif (lft(a) && rgt(b)) result = true;\n\t\t});\n\t\treturn result;\n\t}\n\n\tfor (var i = 1; i < source.length; i++) {\n\t\tvar lastStr = list[list.length - 1];\n\n\t\tif (testChars(lastStr[lastStr.length - 1], source[i])) {\n\t\t\tlist[list.length - 1] += source[i];\n\t\t} else {\n\t\t\tlist.push(source[i]);\n\t\t}\n\t}\n\n\treturn list;\n}\n\nmodule.exports = tokenize;\n"]}